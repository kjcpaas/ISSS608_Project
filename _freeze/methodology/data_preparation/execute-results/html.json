{
  "hash": "fe358e485a8ce5b1980478b7230db0a3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Preparation\"\nformat: html\nexecute: \n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\nThis document will go through how we prepare the data that will be used for the Shiny application.\n\n# 1 Setup\n\n## 1.1 Loading Packages\n\nWe will use the following packages to prepare the data.\n\n-   [jsonlite](https://cran.r-project.org/web/packages/jsonlite/index.html) - To parse JSON\n\n-   [knitr](https://cran.r-project.org/web/packages/knitr/index.html) - For better table displays\n\n-   [tidyverse](https://www.tidyverse.org/) - Data science tools\n\n-   [tidygraph](https://cran.r-project.org/web/packages/tidygraph/index.html) - For graph manipulations\n\n-   [igraph](https://cran.r-project.org/web/packages/igraph/index.html) - Contains functions for network analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(jsonlite, knitr, tidyverse, tidygraph, igraph)\n```\n:::\n\n\n## 1.2 Loading Data\n\nWe will load the provided [VAST Mini-Challenge 3](https://vast-challenge.github.io/2024/MC3.html) dataset, a json file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_data <- fromJSON(\"data/mc3.json\")\nglimpse(mc3_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     : Named list()\n $ nodes     :'data.frame':\t60520 obs. of  15 variables:\n  ..$ type             : chr [1:60520] \"Entity.Organization.Company\" \"Entity.Organization.Company\" \"Entity.Organization.Company\" \"Entity.Organization.Company\" ...\n  ..$ country          : chr [1:60520] \"Uziland\" \"Mawalara\" \"Uzifrica\" \"Islavaragon\" ...\n  ..$ ProductServices  : chr [1:60520] \"Unknown\" \"Furniture and home accessories\" \"Food products\" \"Unknown\" ...\n  ..$ PointOfContact   : chr [1:60520] \"Rebecca Lewis\" \"Michael Lopez\" \"Steven Robertson\" \"Anthony Wyatt\" ...\n  ..$ HeadOfOrg        : chr [1:60520] \"Émilie-Susan Benoit\" \"Honoré Lemoine\" \"Jules Labbé\" \"Dr. Víctor Hurtado\" ...\n  ..$ founding_date    : chr [1:60520] \"1954-04-24T00:00:00\" \"2009-06-12T00:00:00\" \"2029-12-15T00:00:00\" \"1972-02-16T00:00:00\" ...\n  ..$ revenue          : num [1:60520] 5995 71767 0 0 4747 ...\n  ..$ TradeDescription : chr [1:60520] \"Unknown\" \"Abbott-Gomez is a leading manufacturer and supplier of high-quality furniture and home accessories, catering to\"| __truncated__ \"Abbott-Harrison is a leading manufacturer of high-quality food products, including baked goods, snacks, and bev\"| __truncated__ \"Unknown\" ...\n  ..$ _last_edited_by  : chr [1:60520] \"Pelagia Alethea Mordoch\" \"Pelagia Alethea Mordoch\" \"Pelagia Alethea Mordoch\" \"Pelagia Alethea Mordoch\" ...\n  ..$ _last_edited_date: chr [1:60520] \"2035-01-01T00:00:00\" \"2035-01-01T00:00:00\" \"2035-01-01T00:00:00\" \"2035-01-01T00:00:00\" ...\n  ..$ _date_added      : chr [1:60520] \"2035-01-01T00:00:00\" \"2035-01-01T00:00:00\" \"2035-01-01T00:00:00\" \"2035-01-01T00:00:00\" ...\n  ..$ _raw_source      : chr [1:60520] \"Existing Corporate Structure Data\" \"Existing Corporate Structure Data\" \"Existing Corporate Structure Data\" \"Existing Corporate Structure Data\" ...\n  ..$ _algorithm       : chr [1:60520] \"Automatic Import\" \"Automatic Import\" \"Automatic Import\" \"Automatic Import\" ...\n  ..$ id               : chr [1:60520] \"Abbott, Mcbride and Edwards\" \"Abbott-Gomez\" \"Abbott-Harrison\" \"Abbott-Ibarra\" ...\n  ..$ dob              : chr [1:60520] NA NA NA NA ...\n $ links     :'data.frame':\t75817 obs. of  11 variables:\n  ..$ start_date       : chr [1:75817] \"2016-10-29T00:00:00\" \"2035-06-03T00:00:00\" \"2028-11-20T00:00:00\" \"2024-09-04T00:00:00\" ...\n  ..$ type             : chr [1:75817] \"Event.Owns.Shareholdership\" \"Event.Owns.Shareholdership\" \"Event.Owns.Shareholdership\" \"Event.Owns.Shareholdership\" ...\n  ..$ _last_edited_by  : chr [1:75817] \"Pelagia Alethea Mordoch\" \"Niklaus Oberon\" \"Pelagia Alethea Mordoch\" \"Pelagia Alethea Mordoch\" ...\n  ..$ _last_edited_date: chr [1:75817] \"2035-01-01T00:00:00\" \"2035-07-15T00:00:00\" \"2035-01-01T00:00:00\" \"2035-01-01T00:00:00\" ...\n  ..$ _date_added      : chr [1:75817] \"2035-01-01T00:00:00\" \"2035-07-15T00:00:00\" \"2035-01-01T00:00:00\" \"2035-01-01T00:00:00\" ...\n  ..$ _raw_source      : chr [1:75817] \"Existing Corporate Structure Data\" \"Oceanus Corporations Monthly - Jun '35\" \"Existing Corporate Structure Data\" \"Existing Corporate Structure Data\" ...\n  ..$ _algorithm       : chr [1:75817] \"Automatic Import\" \"Manual Entry\" \"Automatic Import\" \"Automatic Import\" ...\n  ..$ source           : chr [1:75817] \"Avery Inc\" \"Berger-Hayes\" \"Bowers Group\" \"Bowman-Howe\" ...\n  ..$ target           : chr [1:75817] \"Allen, Nichols and Thompson\" \"Jensen, Morris and Downs\" \"Barnett Inc\" \"Bennett Ltd\" ...\n  ..$ key              : int [1:75817] 0 0 0 0 0 0 0 0 0 0 ...\n  ..$ end_date         : chr [1:75817] NA NA NA NA ...\n```\n\n\n:::\n:::\n\n\nThere are **60,520 nodes** and **75,817 edges** in the data.\n\n# 2 Graph Elements\n\n## 2.1 Extracting nodes and edges\n\nWe will first extract the nodes and edges.\n\n::: panel-tabset\n### Nodes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_nodes_raw <- as_tibble(mc3_data$nodes)\nglimpse(mc3_nodes_raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 60,520\nColumns: 15\n$ type                <chr> \"Entity.Organization.Company\", \"Entity.Organizatio…\n$ country             <chr> \"Uziland\", \"Mawalara\", \"Uzifrica\", \"Islavaragon\", …\n$ ProductServices     <chr> \"Unknown\", \"Furniture and home accessories\", \"Food…\n$ PointOfContact      <chr> \"Rebecca Lewis\", \"Michael Lopez\", \"Steven Robertso…\n$ HeadOfOrg           <chr> \"Émilie-Susan Benoit\", \"Honoré Lemoine\", \"Jules La…\n$ founding_date       <chr> \"1954-04-24T00:00:00\", \"2009-06-12T00:00:00\", \"202…\n$ revenue             <dbl> 5994.73, 71766.67, 0.00, 0.00, 4746.67, 46566.67, …\n$ TradeDescription    <chr> \"Unknown\", \"Abbott-Gomez is a leading manufacturer…\n$ `_last_edited_by`   <chr> \"Pelagia Alethea Mordoch\", \"Pelagia Alethea Mordoc…\n$ `_last_edited_date` <chr> \"2035-01-01T00:00:00\", \"2035-01-01T00:00:00\", \"203…\n$ `_date_added`       <chr> \"2035-01-01T00:00:00\", \"2035-01-01T00:00:00\", \"203…\n$ `_raw_source`       <chr> \"Existing Corporate Structure Data\", \"Existing Cor…\n$ `_algorithm`        <chr> \"Automatic Import\", \"Automatic Import\", \"Automatic…\n$ id                  <chr> \"Abbott, Mcbride and Edwards\", \"Abbott-Gomez\", \"Ab…\n$ dob                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n```\n\n\n:::\n:::\n\n\nWe will only retain the following columns:\n\n-   **id**: to serve as the identifier for the node\n-   **type**: to differentiate people from companies in the graph.\n-   **ProductServices**: to identify the products of services a business offer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_nodes_lite <- mc3_nodes_raw %>%\n  select(id, type, ProductServices) %>%\n  rename(product_services = ProductServices)\n```\n:::\n\n\n### Edges\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_edges_raw <- as_tibble(mc3_data$links)\nglimpse(mc3_edges_raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 75,817\nColumns: 11\n$ start_date          <chr> \"2016-10-29T00:00:00\", \"2035-06-03T00:00:00\", \"202…\n$ type                <chr> \"Event.Owns.Shareholdership\", \"Event.Owns.Sharehol…\n$ `_last_edited_by`   <chr> \"Pelagia Alethea Mordoch\", \"Niklaus Oberon\", \"Pela…\n$ `_last_edited_date` <chr> \"2035-01-01T00:00:00\", \"2035-07-15T00:00:00\", \"203…\n$ `_date_added`       <chr> \"2035-01-01T00:00:00\", \"2035-07-15T00:00:00\", \"203…\n$ `_raw_source`       <chr> \"Existing Corporate Structure Data\", \"Oceanus Corp…\n$ `_algorithm`        <chr> \"Automatic Import\", \"Manual Entry\", \"Automatic Imp…\n$ source              <chr> \"Avery Inc\", \"Berger-Hayes\", \"Bowers Group\", \"Bowm…\n$ target              <chr> \"Allen, Nichols and Thompson\", \"Jensen, Morris and…\n$ key                 <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ end_date            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n```\n\n\n:::\n:::\n\n\nWe will only retain the following columns:\n\n-   **source**: to identify the actor of the relationship, corresponds to id in nodes.\n-   **target**: to identify the receiver of the relationship, corresponds to id in nodes.\n-   **type**: to identify the type of the relationship\n-   **start_date**: to identify when the relationship started\n-   **end_date**: to identify when the relationship ended\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_edges_lite <- mc3_edges_raw %>% select(source, target, type, start_date, end_date)\n```\n:::\n\n:::\n\n## 2.2 Deeper look at *type*\n\nBoth the `nodes` and `edges` have `type` which contains the type of the nodes and edges. We will assign a `supertype` and a `subtype` from `type`.\n\n::: panel-tabset\n### Nodes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_nodes_lite %>%\n  group_by(type) %>%\n  summarize(count = n()) %>%\n  arrange(-count) %>%\n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|type                                 | count|\n|:------------------------------------|-----:|\n|Entity.Person                        | 50356|\n|Entity.Organization.Company          |  7927|\n|Entity.Person.CEO                    |  1293|\n|Entity.Organization.FishingCompany   |   600|\n|Entity.Organization.LogisticsCompany |   311|\n|Entity.Organization.FinancialCompany |    23|\n|Entity.Organization.NGO              |     5|\n|Entity.Organization.NewsCompany      |     5|\n\n\n:::\n:::\n\n\n`supertype` - type of entity, either *Person* or *Organization*\n\n`subtype` - subcategory of *supertype*, e.g., *Company, FishingCompany, CEO*\n\n### Edges\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_edges_lite %>%\n  group_by(type) %>%\n  summarize(count = n()) %>%\n  arrange(-count) %>%\n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|type                            | count|\n|:-------------------------------|-----:|\n|Event.Owns.Shareholdership      | 39378|\n|Event.Owns.BeneficialOwnership  | 21531|\n|Event.WorksFor                  | 14817|\n|Relationship.FamilyRelationship |    91|\n\n\n:::\n:::\n\n\n`supertype` - type of relationship, either *Ownership*, *Employment, Relationship.*\n\n`subtype` - subcategory of *supertype*, e.g., *Shareholdership, BeneficialOwnership, FamilyRelationship*\n:::\n\n## 2.3 Dates\n\nConsider the date fields, e.g. `start_date`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_edges_lite %>% select(start_date) %>% glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 75,817\nColumns: 1\n$ start_date <chr> \"2016-10-29T00:00:00\", \"2035-06-03T00:00:00\", \"2028-11-20T0…\n```\n\n\n:::\n:::\n\n\nIt is using the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format that includes the time component. We are only interested in the date component so we will just get the **first 10 characters**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubstr(\"2016-10-29T00:00:00\", 1, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2016-10-29\"\n```\n\n\n:::\n:::\n\n\n## 2.4 Node Aliases\n\nAs the nodes have long names, using them as labels in the visualization is not the best way as the text will cover important information.\n\nWe will generate them from the first character of each word. We will define a function to provide this capability.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nto_initials <- function(name) {\n  strsplit(name, \"[^A-Za-z0-9']+\")[[1]] %>%  # Split when non-alphanumeric\n    substr(1, 1) %>% # Get first letter\n    paste0(collapse = \"\") %>%\n    substr(1, 4) # Get first 4 letters only as some names are still too long\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nto_initials(\"SouthSeafood Express Corp\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"SEC\"\n```\n\n\n:::\n:::\n\n\n## 2.5 Other considerations\n\n::: panel-tabset\n### Filtering\n\nWe will add an **included** column to the nodes and edges for filtering purposes so that we can show or hide them depending on the filtering criteria.\n\nThis is particularly useful in network visualization.\n\n### Graph attributes\n\nWe must also rename the columns for compatibility with *igraph* and *tidygraph*.\n\nFor edges, we will rename `source` and `target` to `from` and `to` respectively.\n\nFor nodes, we will rename `id` to `name`.\n:::\n\n# 3 Preparing the Nodes\n\n## 3.1 Shaping the data\n\nWe will now prepare the nodes according to the above considerations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_nodes_clean <- mc3_nodes_lite %>%\n  rename(name = id) %>%\n  mutate(\n    alias = sapply(name, to_initials),\n    supertype = strsplit(type, \".\", fixed=TRUE) %>% sapply('[', 2),\n    # Get the last type as subtype. In the case of Entity.Person,\n    # both supertype and subtype are \"Person\".\n    subtype = strsplit(type, \".\", fixed=TRUE) %>% sapply(tail, n=1),\n    included = 1\n  ) %>% select(name, alias, supertype, subtype, product_services, included)\n```\n:::\n\n\n## 3.2 Checking the type fields\n\nLet's confirm if the types have been mapped correctly to the corresponding `supertype` and `subtype`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_nodes_clean %>%\n  group_by(supertype, subtype) %>%\n  summarize(count = n()) %>%\n  arrange(-count) %>%\n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|supertype    |subtype          | count|\n|:------------|:----------------|-----:|\n|Person       |Person           | 50356|\n|Organization |Company          |  7927|\n|Person       |CEO              |  1293|\n|Organization |FishingCompany   |   600|\n|Organization |LogisticsCompany |   311|\n|Organization |FinancialCompany |    23|\n|Organization |NGO              |     5|\n|Organization |NewsCompany      |     5|\n\n\n:::\n:::\n\n\n## 3.3 Checking the rest of the data\n\nLet's also inspect the rest of the data if they are in the form we need.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_nodes_clean %>% head() %>% kable()\n```\n\n::: {.cell-output-display}\n\n\n|name                        |alias |supertype    |subtype |product_services               | included|\n|:---------------------------|:-----|:------------|:-------|:------------------------------|--------:|\n|Abbott, Mcbride and Edwards |AMaE  |Organization |Company |Unknown                        |        1|\n|Abbott-Gomez                |AG    |Organization |Company |Furniture and home accessories |        1|\n|Abbott-Harrison             |AH    |Organization |Company |Food products                  |        1|\n|Abbott-Ibarra               |AI    |Organization |Company |Unknown                        |        1|\n|Abbott-Sullivan             |AS    |Organization |Company |Unknown                        |        1|\n|Acevedo and Sons            |AaS   |Organization |Company |Fish, crustaceans and molluscs |        1|\n\n\n:::\n:::\n\n\nThe alias was successfully generated based on the node name. The dataframe also has all the columns we need.\n\n# 4 Preparing the Edges\n\n## 4.1 Shaping the data\n\nWith the previous considerations, we will shape the edge data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_edges_clean <- mc3_edges_lite %>%\n  rename(from = source, to = target, ) %>%\n  mutate(\n    supertype = ifelse(\n      grepl(\"Event.Owns\", type),\n      \"Ownership\",\n      ifelse(grepl(\"Relationship\", type), \"Relationship\", \"Employment\")\n    ),\n    subtype = strsplit(type, \".\", fixed = TRUE) %>% sapply(tail, n = 1),\n    # Convert date strings to datetime\n    start_date = substr(start_date, 1, 10) %>% as_date(),\n    end_date = substr(end_date, 1, 10) %>% as_date(),\n    included = 1\n  ) %>%\n  filter(from != to) %>%\n  group_by(from, to, supertype, subtype, start_date, end_date, included) %>%\n  summarize(weight = n())\n```\n:::\n\n\n## 4.2 Checking the type fields\n\nLet's confirm if the types have been mapped correctly to the corresponding `supertype` and `subtype`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_edges_clean %>%\n  group_by(supertype, subtype) %>%\n  summarize(count = n()) %>%\n  arrange(-count) %>%\n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|supertype    |subtype             | count|\n|:------------|:-------------------|-----:|\n|Ownership    |Shareholdership     | 39378|\n|Ownership    |BeneficialOwnership | 21529|\n|Employment   |WorksFor            | 14817|\n|Relationship |FamilyRelationship  |    91|\n\n\n:::\n:::\n\n\n## 4.3 Checking the rest of the data\n\nLet's also inspect the rest of the data if they are in the form we need.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_edges_clean %>% head() %>% kable()\n```\n\n::: {.cell-output-display}\n\n\n|from                   |to                                   |supertype  |subtype             |start_date |end_date | included| weight|\n|:----------------------|:------------------------------------|:----------|:-------------------|:----------|:--------|--------:|------:|\n|4. SeaCargo Ges.m.b.H. |Dry CreekRybachit Marine A/S         |Ownership  |Shareholdership     |2034-12-31 |NA       |        1|      1|\n|4. SeaCargo Ges.m.b.H. |KambalaSea Freight Inc               |Ownership  |Shareholdership     |2033-04-12 |NA       |        1|      1|\n|9. RiverLine CJSC      |SumacAmerica Transport GmbH & Co. KG |Ownership  |Shareholdership     |2028-12-02 |NA       |        1|      1|\n|Aaron Acosta           |Manning-Pratt                        |Employment |WorksFor            |2008-07-30 |NA       |        1|      1|\n|Aaron Acosta           |Manning-Pratt                        |Ownership  |Shareholdership     |2008-09-14 |NA       |        1|      1|\n|Aaron Allen            |Hicks-Calderon                       |Ownership  |BeneficialOwnership |2025-03-06 |NA       |        1|      1|\n\n\n:::\n:::\n\n\nThe dates columns only have the date components, not the time. The dataframe also has all the columns we need.\n\n# 5 Preparing the Networks\n\n## 5.1 Supernetwork\n\nWe will generate supernetwork containing all the nodes and edges we prepared.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsupernetwork = tbl_graph(\n  edges = mc3_edges_clean,\n  nodes = mc3_nodes_clean,\n  directed = TRUE\n)\n```\n:::\n\n\nLet's check the size of this network.\n\n::: panel-tabset\n### Node Count\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvcount(supernetwork)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 60520\n```\n\n\n:::\n:::\n\n\n### Edge Count\n\n\n::: {.cell}\n\n```{.r .cell-code}\necount(supernetwork)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 75815\n```\n\n\n:::\n:::\n\n:::\n\nWe will save this as an RDS file for use in the Shiny app.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(supernetwork, \"data/rds/supernetwork.rds\")\n```\n:::\n\n\n## 5.2 Filter by subnetwork\n\nThe supernetwork is very large and not suitable for visualization as it requires a lot of computing resources to visualize.\n\nHence, we will create a function that will enable us to focus on the network of a given node. We will define a function `extract_subnetwork` for this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_subnetwork <- function(graph, node_name, distance=-1) {\n  # negative distance will show full graph\n  node <- which(V(graph)$name == node_name)\n  \n  if(length(node) == 0) {\n    # Return empty graph\n    return(tbl_graph())\n  }\n  \n  distance <- ifelse(distance < 0, length(graph), distance)\n  vertices <- ego(graph, nodes = node, order = distance)[[1]]\n  igraph_subgraph <- induced_subgraph(graph, vids = vertices)\n  nodes_df <- as_data_frame(igraph_subgraph, what = \"vertices\")\n  edges_sf <- as_data_frame(igraph_subgraph, what = \"edges\")\n  tbl_graph(nodes=nodes_df, edges=edges_sf, directed=is_directed(graph))\n}\n```\n:::\n\n\n::: {.callout-tip appearance=\"simple\"}\n### About the function\n\nThis function generates a subnetwork from a **graph** based on the nodes in proximity to **reference node**.\n\nThe size of the network can be controlled by the **distance** of the other nodes from the reference node. If the distance is negative, it will include all nodes connected in any way to the reference node.\n\nIt uses `ego` from `igraph` to figure out which nodes are connected within a given distance from a node.\n:::\n\n## 5.3 Filter by date\n\nNext, to enable inspecting temporal patterns, we will filter the edges and nodes based on their existence on the given date.\n\nWe will define `extract_network_snapshot` to enable this filtering.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_network_snapshot <- function(graph, datestring, delete = FALSE) {\n  date <- as_date(datestring)\n  \n  graph_nodes = as_data_frame(graph, what = \"vertices\")\n  graph_edges = as_data_frame(graph, what = \"edges\")\n  \n  if(is.na(date) || vcount(graph) == 0) {\n    return(graph)\n  }\n  \n  # Assume transition is at 12 AM of given date\n  graph_edges <- graph_edges %>%\n    mutate(\n      included = ifelse(is.na(start_date) | (\n        start_date <= date &\n          (is.na(end_date) |\n             end_date > date)\n      ), 1, 0)\n    )\n  \n  filtered_edges <- graph_edges %>% filter(included == 1)\n    \n  graph_nodes <- graph_nodes %>%\n    mutate(included = (\n      name %in% filtered_edges$from | name %in% filtered_edges$to\n    ))\n  \n  if(!delete) {\n    return(\n      tbl_graph(nodes = graph_nodes,\n                edges = graph_edges,\n                directed = is_directed(graph))\n    )\n  }\n  \n  tbl_graph(nodes = graph_nodes %>% filter(included == 1),\n            edges = filtered_edges,\n            directed = is_directed(graph))\n}\n```\n:::\n\n\n::: {.callout-tip appearance=\"simple\"}\n### About the function\n\nThis function sets `included` to `true` if the edge is active during the given date. For the nodes, they are considered active if they are connected to at least one other node at that point in time.\n\nThere is also an option to delete the inactive elements altogether, which is useful to calculate measures of centrality on the network structure at that point in time.\n:::\n\n# 6 Preparing the power graph\n\nTo figure out who are the most influential entities within the network, we have to look at the power dynamics in each relationship. This entails generating a graph from the relationship graph that reflects these dynamics.\n\n## 6.1 Arrow direction\n\nAs we want to investigate the flow of power and resources, the direction will be from the **less powerful to more powerful** entity.\n\n## 6.2 Weights\n\nFor the purpose of our analysis, we will score each relationship flow according to the following:\n\n-   Benefits from the resources: 1 (+1 if they are the owner of a company)\n\n-   A decision-maker on where resources go: 2 (+1 if they are the ultimate decision maker)\n\n-   Influential on the other person: 1 (only if target is a person)\n\nWe will use the total as the weights for each edge. Lastly, we will **rename** the relationship to prevent confusion in case of direction reversal.\n\n## 6.3 Score table\n\n::: panel-tabset\n### BeneficialOwner\n\nBeneficial owners benefit from the resources of the company.\n\nWhile BeneficialOwners may or may not be Shareholders in the same company, they hold the ultimate decision-making power.\n\n|                            |         |\n|----------------------------|---------|\n| Current **From**           | Owner   |\n| Current **To**             | Company |\n| New **From** (Lower power) | Company |\n| New **To** (Higher power)  | Owner   |\n| New **subtype**            | OwnedBy |\n| Beneficiary                | 1 + 1   |\n| Decision-maker             | 2 + 1   |\n| Influential (on person)    | 0       |\n| **Total**                  | **5**   |\n\n: Beneficial Ownership {.bordered .striped}\n\n### Shareholdership\n\nShareholders may receive proceeds from the profits of the company.\n\nThey have some decision-making power within the company. However, it is the Beneficial Owner that ultimately gets the final say in decisions.\n\n|                            |                |\n|----------------------------|----------------|\n| Current **From**           | Shareholder    |\n| Current **To**             | Company        |\n| New **From** (Lower power) | Company        |\n| New **To** (Higher power)  | Shareholder    |\n| New **subtype**            | HasShareholder |\n| Beneficiary                | 1              |\n| Decision-maker             | 2              |\n| Influential (on person)    | 0              |\n| **Total**                  | **3**          |\n\n: Shareholdership {.bordered .striped}\n\n### WorksFor\n\nEmployees are contractually obligated to act in the interests of their employer.\n\nEmployers also influence what their employees do in the business.\n\n|                            |         |\n|----------------------------|---------|\n| Current **From**           | Owner   |\n| Current **To**             | Company |\n| New **From** (Lower power) | Company |\n| New **To** (Higher power)  | Owner   |\n| New **subtype**            | OwnedBy |\n| Beneficiary                |         |\n| Decision-maker             | 2       |\n| Influential (on person)    | 1       |\n| **Total**                  | 3       |\n\n: WorksFor {.bordered .striped}\n\n### FamilyRelationship\n\nAs it is impossible to figure out the power dynamics within a family, we will retain direction and assume that the arrow points to the person that benefits more from the relationship.\n\n|                            |                    |\n|----------------------------|--------------------|\n| Current **From**           | Person 1           |\n| Current **To**             | Person 2           |\n| New **From** (Lower power) | Person 1           |\n| New **To** (Higher power)  | Person 2           |\n| New **subtype**            | FamilyRelationship |\n| Beneficiary                | 1                  |\n| Decision-maker             | 0                  |\n| Influential (on person)    | 1                  |\n| **Total**                  | **2**              |\n\n: FamilyRelationship {.bordered .striped}\n:::\n\n::: callout-note\n### Model Revision\n\nFrom the results of visualization in the original [Take-home Exercise 3](https://isss608-kjcpaas.netlify.app/take-home_exs/ex3/take-home_ex3#table-1), the model for the power graph resulted in the influence `FamilyRelationship` being too strong that it overrode all power held from business activities.\n\nWe revised this to be unidirectional to lessen the impact and we cannot assume that family members have the same sharing dynamic.\n:::\n\n## 6.4 Converting relationship edges to power flow\n\nUsing the table above, we will create a function to convert relationship edges to power flow. We will define a function `convert_edges_to_power_flow` to take care of converting edges to power graph\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code for convert_edges_to_power_flow()\"}\nconvert_edges_to_power_flow <- function(edges) {\n  # Employee -> Employer, weight: 2\n  works_for <- edges %>% filter(subtype == \"WorksFor\") %>% mutate(weight = 3)\n  \n  # Person1 <-> Person2, weight: 1\n  family <- edges %>% filter(subtype == \"FamilyRelationship\") %>% mutate(weight = 2)\n  \n  # Shareholder <- Company, weight: 2\n  shareholder <- edges %>% filter(subtype == \"Shareholdership\") %>%\n    mutate(\n      temp = from,\n      from = to,\n      to = temp,\n      weight = 3,\n      # Rename to prevent confusion due to reversed arrows\n      subtype = \"HasShareholder\",\n    ) %>%\n    select(from, to, supertype, subtype, start_date, end_date, weight, included)\n  \n  # BeneficialOwner <- Company, weight: 3\n  owner <- edges %>% filter(subtype == \"BeneficialOwnership\") %>%\n    mutate(\n      temp = from,\n      from = to,\n      to = temp,\n      weight = 5,\n      # Rename to prevent confusion due to reversed arrows\n      subtype = \"OwnedBy\",\n    ) %>%\n    select(from, to, supertype, subtype, start_date, end_date, weight, included)\n  \n  works_for %>%\n    rbind(family) %>%\n    rbind(shareholder) %>%\n    rbind(owner)\n}\n```\n:::\n\n\nLet us check the resulting edges table to see if each edge type has been mapped correctly.\n\n::: panel-tabset\n### Relationship\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsupernetwork %>%\n  as_data_frame(what = \"edges\") %>%\n  group_by(supertype, subtype) %>%\n  summarize(count = n()) %>%\n  arrange(-count) %>%\n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|supertype    |subtype             | count|\n|:------------|:-------------------|-----:|\n|Ownership    |Shareholdership     | 39378|\n|Ownership    |BeneficialOwnership | 21529|\n|Employment   |WorksFor            | 14817|\n|Relationship |FamilyRelationship  |    91|\n\n\n:::\n:::\n\n\n### Power\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsupernetwork %>%\n  as_data_frame(what = \"edges\") %>%\n  convert_edges_to_power_flow() %>%\n  group_by(supertype, subtype) %>%\n  summarize(count = n()) %>%\n  arrange(-count) %>%\n  kable()\n```\n\n::: {.cell-output-display}\n\n\n|supertype    |subtype            | count|\n|:------------|:------------------|-----:|\n|Ownership    |HasShareholder     | 39378|\n|Ownership    |OwnedBy            | 21529|\n|Employment   |WorksFor           | 14817|\n|Relationship |FamilyRelationship |    91|\n\n\n:::\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}